App structure:
   App.jsx (get-user.js)
     ~ Predictions: prediction-results (get-fixtures.js)
       ~ Fixture list
         ~ Fixture


Tasks:
  ✔ Colour in results depending on prediction @done (17-08-03 19:09)
  ✔ Bring up user state to top level of app @done (17-08-03 19:09)
    ✔ then, Pass down props with user data like username and team name @done (17-08-03 19:09)
  ✔ In userPredictions put predictions in their own object @done (17-08-02 23:57)
    ☐ add booleans for hasSubmittedPredictions and resultTotalled and actual points score
  ✔ Add sign up/login/logout pages and functions @done (17-08-04 22:43)
  ✔ Use logged in ID from aut to grab user data from Firebase @done (17-08-15 22:40)
  ☐ Sign up form, fields to add: username, teamname, and upload them to server on create
  ☐ Add team data to DB
  ☐ Add state info to DB eg current season and gameweek
  ☐ Add a check for getting correct gameweek
  ✔ Add on load request, get: @done (17-08-15 22:56)
    ✔ Weeks fixtures @done (17-08-15 22:56)
    ✔ Predictions (if any) @done (17-08-15 22:56)
    ✔ User data @done (17-08-15 22:56)

Todo:
  ☐ Get how many 3s, 1s and 0s
    ☐ Use to order the league
  League:
    ☐ Make one
  Login:
    ✔ Browser state @done (17-08-15 22:56)
  Routing:
  ☐ add routing
  Attach route to state
  When change route update state
    ☐ Home / Predictions page
    Check if a user is logged in
      ~ yes - put path as /:user
      ~ no - put path to / 
    ☐ Profile (private)
    ☐ Team page (public)
    ☐ League page (public)
  
Thoughts: 
  Can only change the team name once a season
  Add a one offs prediction game (you just do one gameweek)
  You pick a favourite team - get double points for those results = bad
  Star a prediction each week

Notes:
   React folder structure = https://daveceddia.com/react-project-structure/
   Routing = https://medium.freecodecamp.org/you-might-not-need-react-router-38673620f3d
     library for parsing :typeurls https://github.com/pillarjs/path-to-regexp
     or history api https://github.com/reacttraining/history
   Using Firebase and React Router: http://bodiddlie.github.io/firebase-auth-with-react-router/
   Setting state on properties of objects: https://stackoverflow.com/a/43639228/2368141
   Fooball api, has matchdays/gameweeks: http://api.football-data.org
   // react router help: https://css-tricks.com/react-router-4/]
   I can set up a cron job to run a page that checks stuff like game week and in play
     (eg https://github.com/firebase/functions-samples/tree/master/delete-unused-accounts-cron)
   Firebase deep-quering: https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html

Userflow:
   Is logged out:
     - Nav = sitename + login / sign up
     - Show predictions - user can input scores, on submit prompted to signup

 Is logged in:
    - we auto get their id
      - get users name and team
      - Get current gameweek
        - check gameweek on football-data api
          -? compare with db
        - get fixtures for gameweek
          - check if fixtures are on the firebase db, if so grab
          - if not link up to football-data api and add the, to firebase
        - check if user has made predictions
          - if not use fixtures data
          - if so pull from firebase and use that instead or fixtures data
        - check if games have been played and therefore we show results

Key data:
  - if logged in get user id
    - get data fb-db api, then update firebase
      - gameweek
      - set server time
      - get fixture data from fb-db api
        - compare date of last game with server time
      - get users personal data
        - name
        - team
 